
/*******
 MACHINE GENERATED, DO NOT EDIT.
 Generated by gatech.mmpm.tools.IDomainGenerator, written by Marco Antonio Gomez Martin
 *******/
package bc.mmpm;


import gatech.mmpm.sensor.Sensor;


  
/**
 Class for the 'BattleCity' domain.

 This class is machine-generated. If you have to change anything,
 probably you want to edit the XML file used to create this class.
 @author gatech.mmpm.tools.DomainGenerator, developed by Marco Antonio G�mez Mart�n
 and David Llanso.
*/
public class BCDomain implements gatech.mmpm.IDomain {

    public String getName() {
       return getDomainName();
    }

	/* *
	 * Return the world model of the game.
	 * @return World model or null if there is no one.
	 */
/*
    // This was to be a D2 hack. MMPM will not provide that.
    public worldmodel.WorldModel getWorldModel() {
       
       // No specific WorldModel in 'BattleCity' domain
       // Default used.
       return new worldmodel.WorldModel();
    }
*/

    /**
     * Method that defines all the entities in the domain.
     * @return An array with all the Class'es that implement the
     * D2 entities for the domain.
    */
    public Class<? extends gatech.mmpm.Entity>[] getEntities() {

        Class<? extends gatech.mmpm.Entity> []ret;

        ret = new Class[] {
                    bc.mmpm.entities.BCOTank.class,
                    bc.mmpm.entities.BCOEnemyTank.class,
                    bc.mmpm.entities.BCOPlayerTank.class,
                    bc.mmpm.entities.BCOTankGenerator.class,
                    bc.mmpm.entities.BCOBullet.class,
                    bc.mmpm.entities.BCOBase.class,
                    bc.mmpm.entities.BCOWater.class,
                    bc.mmpm.entities.BCOBoundaryUnit.class,
                    bc.mmpm.entities.BCOWall.class,
                    bc.mmpm.entities.BCOBlock.class,
                    
              };

        return ret;        
    }

    /**
    * Method that return a new entity generated from its short name class.
    * @return New instance of the specified entity.
    */
    public gatech.mmpm.Entity getEntityByShortName(char shortName, String entityId, String owner) {

        gatech.mmpm.Entity ret;

        switch (shortName) {
        
            case 'w':
                ret = new bc.mmpm.entities.BCOWater(entityId,owner);
            break;
          
            case 'm':
                ret = new bc.mmpm.entities.BCOWall(entityId,owner);
            break;
          
            case 'b':
                ret = new bc.mmpm.entities.BCOBlock(entityId,owner);
            break;
          
      default: ret = null;
      };

      return ret;
      }

      /**
      * Method that return a new entity generated from its name class.
      * @return New instance of the specified entity.
      */
      public gatech.mmpm.Entity getEntityByName(String name, String entityId, String owner) {
      
        if( name.equals("BCOTank") )
        return new bc.mmpm.entities.BCOTank(entityId,owner);
      
        if( name.equals("BCOEnemyTank") )
        return new bc.mmpm.entities.BCOEnemyTank(entityId,owner);
      
        if( name.equals("BCOPlayerTank") )
        return new bc.mmpm.entities.BCOPlayerTank(entityId,owner);
      
        if( name.equals("BCOTankGenerator") )
        return new bc.mmpm.entities.BCOTankGenerator(entityId,owner);
      
        if( name.equals("BCOBullet") )
        return new bc.mmpm.entities.BCOBullet(entityId,owner);
      
        if( name.equals("BCOBase") )
        return new bc.mmpm.entities.BCOBase(entityId,owner);
      
        if( name.equals("BCOWater") )
        return new bc.mmpm.entities.BCOWater(entityId,owner);
      
        if( name.equals("BCOBoundaryUnit") )
        return new bc.mmpm.entities.BCOBoundaryUnit(entityId,owner);
      
        if( name.equals("BCOWall") )
        return new bc.mmpm.entities.BCOWall(entityId,owner);
      
        if( name.equals("BCOBlock") )
        return new bc.mmpm.entities.BCOBlock(entityId,owner);
      
        return null;
    }

    /**
     Method that defines all the actions in the domain.
     @return An array with all the Class'es that implement the
     D2 actions for the domain.
    */
    public Class[] getActions() {
        Class []ret;

        ret = new Class[] {
                    bc.mmpm.actions.Fire.class,
                    bc.mmpm.actions.Move.class,
                    
              };

        return ret;        
    }

    /**
     Method that defines all the sensors in the domain.
     @return An array with all sensors.
    */
    public Sensor[] getSensors() {
        Sensor []ret;

        ret = new Sensor[] {
                     
                        new bc.mmpm.sensors.DisappearedEntity(),
                     
                        new bc.mmpm.sensors.NewEntity(),
                     
                        new bc.mmpm.sensors.ChangedEntity(),
                     
                        new bc.mmpm.sensors.NextMoveDelay(),
                     
                        new bc.mmpm.sensors.NextShotDelay(),
                     
                        new bc.mmpm.sensors.ClosestEntityInLine(),
                     
                        new bc.mmpm.sensors.EnemyInLine(),
                     
                        new bc.mmpm.sensors.PlayerBaseInLine(),
                     
                        new bc.mmpm.sensors.EnemyBaseInLine(),
                     
                        new bc.mmpm.sensors.WallAhead(),
                     
                        new bc.mmpm.sensors.BlockAhead(),
                     
              };

        return ret;        
    }

    /**
     Method that defines all the goals in the domain.
     @return An array with all goals.
    */
    public Sensor[] getGoals() {
        Sensor []ret;

        ret = new Sensor[] {
           
                        new bc.mmpm.goals.DestroyEnemies(),
           
                        new bc.mmpm.goals.DestroyEnemyBase(),
           
                        new bc.mmpm.goals.GetInLineWithEnemyBase(),
           
                        new bc.mmpm.goals.GetInLineWithEnemy(),
           
                        new bc.mmpm.goals.WinGoal()
             
              };

        return ret;        
    }

    /**
     Method that return the win goal condition.

     @return An object (Sensor) that represent the win goal.
    */
    public Sensor getWinGoal() {
       
       return new bc.mmpm.goals.WinGoal();
    }

    // This static method could be used in the game
    // itself; it is not forced by the gatech.mmpm.IDomain interface
    public static String getDomainName() {
        return "BattleCity";
    }

	// Someone included this method in gatech.mmpm.domain
	// and did not
	// update the domain generation tool.
	// A hack has been done: the generation tool
	// implements this method returning always null.
	// If this is important, then the XML with the
	// game domain should include the value to be
	// returned here, and the tool should be updated.
	public String getRulesFile() {
		return null;
	}
}
