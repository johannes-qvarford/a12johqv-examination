
/*******
 MACHINE GENERATED, DO NOT EDIT.
 Generated by gatech.mmpm.tools.IDomainGenerator, written by Marco Antonio G—mez Mart’n
 *******/
package s2.mmpm;


import gatech.mmpm.sensor.Sensor;


  
/**
 Class for the 'S2' domain.

 This class is machine-generated. If you have to change anything,
 probably you want to edit the XML file used to create this class.
 @author gatech.mmpm.tools.DomainGenerator, developed by Marco Antonio G—mez Mart’n
 and David Llanso.
*/
public class S2Domain implements gatech.mmpm.IDomain {

    public String getName() {
       return getDomainName();
    }

	/* *
	 * Return the world model of the game.
	 * @return World model or null if there is no one.
	 */
/*
    // This was to be a D2 hack. MMPM will not provide that.
    public worldmodel.WorldModel getWorldModel() {
       
       // No specific WorldModel in 'S2' domain
       // Default used.
       return new worldmodel.WorldModel();
    }
*/

    /**
     * Method that defines all the entities in the domain.
     * @return An array with all the Class'es that implement the
     * D2 entities for the domain.
    */
    public Class<? extends gatech.mmpm.Entity>[] getEntities() {

        Class<? extends gatech.mmpm.Entity> []ret;

        ret = new Class[] {
                    s2.mmpm.entities.WUnit.class,
                    s2.mmpm.entities.WPlayer.class,
                    s2.mmpm.entities.WTroop.class,
                    s2.mmpm.entities.WBuilding.class,
                    s2.mmpm.entities.WGoldMine.class,
                    s2.mmpm.entities.WTower.class,
                    s2.mmpm.entities.WFootman.class,
                    s2.mmpm.entities.WPeasant.class,
                    s2.mmpm.entities.WCatapult.class,
                    s2.mmpm.entities.WKnight.class,
                    s2.mmpm.entities.WArcher.class,
                    s2.mmpm.entities.WFarm.class,
                    s2.mmpm.entities.WBarracks.class,
                    s2.mmpm.entities.WStable.class,
                    s2.mmpm.entities.WTownhall.class,
                    s2.mmpm.entities.WLumberMill.class,
                    s2.mmpm.entities.WBlacksmith.class,
                    s2.mmpm.entities.WFortress.class,
                    s2.mmpm.entities.WOMapEntity.class,
                    s2.mmpm.entities.WOGrass.class,
                    s2.mmpm.entities.WOWater.class,
                    s2.mmpm.entities.WOWall.class,
                    s2.mmpm.entities.WOTree.class,
                    s2.mmpm.entities.WOCoast.class,
                    
              };

        return ret;        
    }

    /**
    * Method that return a new entity generated from its short name class.
    * @return New instance of the specified entity.
    */
    public gatech.mmpm.Entity getEntityByShortName(char shortName, String entityId, String owner) {

        gatech.mmpm.Entity ret;

        switch (shortName) {
        
            case '.':
                ret = new s2.mmpm.entities.WOGrass(entityId,owner);
            break;
          
            case 'w':
                ret = new s2.mmpm.entities.WOWater(entityId,owner);
            break;
          
            case 't':
                ret = new s2.mmpm.entities.WOTree(entityId,owner);
            break;
          
      default: ret = null;
      };

      return ret;
      }

      /**
      * Method that return a new entity generated from its name class.
      * @return New instance of the specified entity.
      */
      public gatech.mmpm.Entity getEntityByName(String name, String entityId, String owner) {
      
        if( name.equals("WUnit") )
        return new s2.mmpm.entities.WUnit(entityId,owner);
      
        if( name.equals("WPlayer") )
        return new s2.mmpm.entities.WPlayer(entityId,owner);
      
        if( name.equals("WTroop") )
        return new s2.mmpm.entities.WTroop(entityId,owner);
      
        if( name.equals("WBuilding") )
        return new s2.mmpm.entities.WBuilding(entityId,owner);
      
        if( name.equals("WGoldMine") )
        return new s2.mmpm.entities.WGoldMine(entityId,owner);
      
        if( name.equals("WTower") )
        return new s2.mmpm.entities.WTower(entityId,owner);
      
        if( name.equals("WFootman") )
        return new s2.mmpm.entities.WFootman(entityId,owner);
      
        if( name.equals("WPeasant") )
        return new s2.mmpm.entities.WPeasant(entityId,owner);
      
        if( name.equals("WCatapult") )
        return new s2.mmpm.entities.WCatapult(entityId,owner);
      
        if( name.equals("WKnight") )
        return new s2.mmpm.entities.WKnight(entityId,owner);
      
        if( name.equals("WArcher") )
        return new s2.mmpm.entities.WArcher(entityId,owner);
      
        if( name.equals("WFarm") )
        return new s2.mmpm.entities.WFarm(entityId,owner);
      
        if( name.equals("WBarracks") )
        return new s2.mmpm.entities.WBarracks(entityId,owner);
      
        if( name.equals("WStable") )
        return new s2.mmpm.entities.WStable(entityId,owner);
      
        if( name.equals("WTownhall") )
        return new s2.mmpm.entities.WTownhall(entityId,owner);
      
        if( name.equals("WLumberMill") )
        return new s2.mmpm.entities.WLumberMill(entityId,owner);
      
        if( name.equals("WBlacksmith") )
        return new s2.mmpm.entities.WBlacksmith(entityId,owner);
      
        if( name.equals("WFortress") )
        return new s2.mmpm.entities.WFortress(entityId,owner);
      
        if( name.equals("WOMapEntity") )
        return new s2.mmpm.entities.WOMapEntity(entityId,owner);
      
        if( name.equals("WOGrass") )
        return new s2.mmpm.entities.WOGrass(entityId,owner);
      
        if( name.equals("WOWater") )
        return new s2.mmpm.entities.WOWater(entityId,owner);
      
        if( name.equals("WOWall") )
        return new s2.mmpm.entities.WOWall(entityId,owner);
      
        if( name.equals("WOTree") )
        return new s2.mmpm.entities.WOTree(entityId,owner);
      
        if( name.equals("WOCoast") )
        return new s2.mmpm.entities.WOCoast(entityId,owner);
      
        return null;
    }

    /**
     Method that defines all the actions in the domain.
     @return An array with all the Class'es that implement the
     D2 actions for the domain.
    */
    public Class[] getActions() {
        Class []ret;

        ret = new Class[] {
                    s2.mmpm.actions.Attack.class,
                    s2.mmpm.actions.AttackLocation.class,
                    s2.mmpm.actions.Build.class,
                    s2.mmpm.actions.Move.class,
                    s2.mmpm.actions.Repair.class,
                    s2.mmpm.actions.ResourceLocation.class,
                    s2.mmpm.actions.Stop.class,
                    s2.mmpm.actions.Train.class,
                    
              };

        return ret;        
    }

    /**
     Method that defines all the sensors in the domain.
     @return An array with all sensors.
    */
    public Sensor[] getSensors() {
        Sensor []ret;

        ret = new Sensor[] {
                     
                        new s2.mmpm.sensors.EntitiesNeededToBuildType(),
                     
                        new s2.mmpm.sensors.BuildingSpace(),
                     
                        new s2.mmpm.sensors.GoldCondition(),
                     
                        new s2.mmpm.sensors.GoldSensor(),
                     
                        new s2.mmpm.sensors.WoodCondition(),
                     
                        new s2.mmpm.sensors.WoodSensor(),
                     
                        new s2.mmpm.sensors.NewUnitBy(),
                     
                        new s2.mmpm.sensors.Reachable(),
                     
                        new s2.mmpm.sensors.ResourceReachable(),
                     
                        new s2.mmpm.sensors.Status(),
                     
                        new s2.mmpm.sensors.Attacked(),
                     
                        new s2.mmpm.sensors.BuildingComplete(),
                     
                        new s2.mmpm.sensors.UnitKilled(),
                     
                        new s2.mmpm.sensors.HaveUnit(),
                     
                        new s2.mmpm.sensors.NumberOfUnitsOfType(),
                     
                        new s2.mmpm.sensors.NumberOfNonNeutralEntities(),
                     
                        new s2.mmpm.sensors.PlayerExists(),
                     
              };

        return ret;        
    }

    /**
     Method that defines all the goals in the domain.
     @return An array with all goals.
    */
    public Sensor[] getGoals() {
        Sensor []ret;

        ret = new Sensor[] {
           
                        new s2.mmpm.goals.HaveWArcher(),
           
                        new s2.mmpm.goals.HaveWCatapult(),
           
                        new s2.mmpm.goals.HaveWLumberMill(),
           
                        new s2.mmpm.goals.HaveWFootman(),
           
                        new s2.mmpm.goals.HaveWFortress(),
           
                        new s2.mmpm.goals.HaveWBarracks(),
           
                        new s2.mmpm.goals.HaveWKnight(),
           
                        new s2.mmpm.goals.HaveWPeasant(),
           
                        new s2.mmpm.goals.HaveWStable(),
           
                        new s2.mmpm.goals.HaveWTownhall(),
           
                        new s2.mmpm.goals.HaveWTower(),
           
                        new s2.mmpm.goals.HaveWBlacksmith(),
           
                        new s2.mmpm.goals.WinGoal()
             
              };

        return ret;        
    }

    /**
     Method that return the win goal condition.

     @return An object (Sensor) that represent the win goal.
    */
    public Sensor getWinGoal() {
       
       return new s2.mmpm.goals.WinGoal();
    }

    // This static method could be used in the game
    // itself; it is not forced by the gatech.mmpm.IDomain interface
    public static String getDomainName() {
        return "S2";
    }

	// Someone included this method in gatech.mmpm.domain
	// and did not
	// update the domain generation tool.
	// A hack has been done: the generation tool
	// implements this method returning always null.
	// If this is important, then the XML with the
	// game domain should include the value to be
	// returned here, and the tool should be updated.
	public String getRulesFile() {
		return null;
	}
}
